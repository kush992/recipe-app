import { GetServerSidePropsContext } from 'next';
import Head from 'next/head';
import { baseUrl } from '../../../src/common/utility';
import { RecipeDetailedInfo } from '../../../src/shared/types/RecipeDetailedInfo';

interface Props {
	recipeData: RecipeDetailedInfo;
}

const Recipe = ({ recipeData }: Props) => {
	return (
		<div className='max-w-7xl mx-auto mt-2 p-6'>
			<Head>
				<title>{recipeData.title}</title>
				<meta name='description' content='Generated by create next app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>

			{recipeData.title}
			<div dangerouslySetInnerHTML={{ __html: recipeData.instructions }} />
		</div>
	);
};

export default Recipe;

export async function getServerSideProps(context: GetServerSidePropsContext) {
	const { params } = context;
	if (!params) {
		return {
			props: {
				error: 'No recipe id provided',
				recipeData: [],
			},
		};
	}
	context.res.setHeader('Cache-Control', 'public, s-maxage=10, stale-while-revalidate=59');

	const { recipeId } = params;
	const response = await fetch(`${baseUrl}/getRecipeById?id=${recipeId}`);

	if (!response.ok) {
		console.error(`Error: ${response.status} - ${response.statusText}`);
		return {
			props: {
				error: `Error: ${response.status} - ${response.statusText}`,
				recipeData: [],
			},
		};
	}

	const recipeData: any = await response.json();

	return {
		props: {
			recipeData: recipeData,
		},
	};
}
