import Head from 'next/head';
import HomePage from '../src/components/HomePage';
import { RecipeSearch } from '../src/shared/types/RecipeSearch';
import { DataWithPagination } from '../src/shared/types/DataWithPagination';
import { baseUrl } from '../src/common/utility';
import { ApiRoutes } from '../src/shared/Enums/ApiRoutes';

interface Props {
	timeSensitiveRecipes: RecipeSearch[];
	ketoRecipes: RecipeSearch[];
	vegetarianRecipes: RecipeSearch[];
	nonVegetarianRecipes: RecipeSearch[];
}

const Home = ({ timeSensitiveRecipes, ketoRecipes, vegetarianRecipes, nonVegetarianRecipes }: Props) => {
	return (
		<div className='max-w-7xl mx-auto mt-2 p-6'>
			<Head>
				<title>Recipe Search App</title>
				<meta name='description' content='Generated by create next app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>

			<HomePage
				timeSensitiveRecipes={timeSensitiveRecipes}
				ketoRecipes={ketoRecipes}
				vegetarianRecipes={vegetarianRecipes}
				nonVegetarianRecipes={nonVegetarianRecipes}
			/>
		</div>
	);
};

export default Home;

export async function getServerSideProps() {
	try {
		const [timeSensitiveRecipesResponse, ketoRecipesResponse, vegetarianRecipesResponse, nonvegetarianRecipesResponse] = await Promise.all([
			fetch(`${baseUrl()}${ApiRoutes.SEARCH_RECIPE_BY_TIME}?maxReadyTime=30&limit=3`),
			fetch(`${baseUrl()}${ApiRoutes.SEARCH_RECIPE_BY_DIET}?diet=ketogenic&limit=3`),
			fetch(`${baseUrl()}${ApiRoutes.SEARCH_RECIPE_BY_DIET}?diet=vegetarian&limit=3`),
			fetch(`${baseUrl()}${ApiRoutes.SEARCH_RECIPE_BY_DIET}?diet=whole30&limit=10&includeIngredients=chicken`),
		]);

		if (!timeSensitiveRecipesResponse.ok) {
			throw new Error(`Error: ${timeSensitiveRecipesResponse.status} - ${timeSensitiveRecipesResponse.statusText}`);
		}
		if (!ketoRecipesResponse.ok) {
			throw new Error(`Error: ${ketoRecipesResponse.status} - ${ketoRecipesResponse.statusText}`);
		}
		if (!vegetarianRecipesResponse.ok) {
			throw new Error(`Error: ${vegetarianRecipesResponse.status} - ${vegetarianRecipesResponse.statusText}`);
		}
		if (!nonvegetarianRecipesResponse.ok) {
			throw new Error(`Error: ${nonvegetarianRecipesResponse.status} - ${nonvegetarianRecipesResponse.statusText}`);
		}

		const timeSensitiveRecipes: DataWithPagination<RecipeSearch> = await timeSensitiveRecipesResponse.json();
		const ketoRecipes: DataWithPagination<RecipeSearch> = await ketoRecipesResponse.json();
		const vegetarianRecipes: DataWithPagination<RecipeSearch> = await vegetarianRecipesResponse.json();
		const nonVegetarianRecipes: DataWithPagination<RecipeSearch> = await nonvegetarianRecipesResponse.json();

		return {
			props: {
				timeSensitiveRecipes: timeSensitiveRecipes.results,
				ketoRecipes: ketoRecipes.results,
				vegetarianRecipes: vegetarianRecipes.results,
				nonVegetarianRecipes: nonVegetarianRecipes.results,
			},
		};
	} catch (error) {
		console.error(error);
		return {
			props: {
				error: 'An error occurred',
				timeSensitiveRecipes: [],
				ketoRecipes: [],
				vegetarianRecipes: [],
				nonVegetarianRecipes: [],
			},
		};
	}
}
